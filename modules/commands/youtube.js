const axios = require('axios');
const ytdl = require('ytdl-core');
const fs = require('fs-extra');
const request = require('request');

module.exports.run = async function ({ api: e, event: a, args: t }) {
    if (t.length === 0 || !t) {
        return e.sendMessage("¬ª B·∫°n ch∆∞a nh·∫≠p t√™n b√†i h√°t! Vui l√≤ng th·ª≠ l·∫°i.", a.threadID, a.messageID);
    }

    const query = t.join(" "); // T·ª´ kh√≥a t√¨m ki·∫øm
    const numResults = 10; // L·∫•y 10 video ƒë·∫ßu ti√™n

    const apiKey = "YOUR_YOUTUBE_API_KEY"; // Thay th·∫ø b·∫±ng API key c·ªßa b·∫°n
    try {
        // G·ª≠i y√™u c·∫ßu t√¨m ki·∫øm video YouTube
        const searchResponse = await axios.get(`https://www.googleapis.com/youtube/v3/search`, {
            params: {
                part: 'snippet',
                q: query,
                type: 'video',
                maxResults: numResults,
                key: apiKey
            }
        });

        const searchResults = searchResponse.data.items;
        if (searchResults.length === 0) {
            return e.sendMessage("Kh√¥ng t√¨m th·∫•y video n√†o v·ªõi t·ª´ kh√≥a b·∫°n nh·∫≠p.", a.threadID, a.messageID);
        }

        let videoList = "";
        let videoLinks = [];

        // L·∫∑p qua c√°c video t√¨m th·∫•y v√† t·∫°o danh s√°ch
        for (let i = 0; i < searchResults.length; i++) {
            const video = searchResults[i];
            const videoId = video.id.videoId;
            const videoTitle = video.snippet.title;

            // L·∫•y th√¥ng tin chi ti·∫øt c·ªßa video, bao g·ªìm s·ªë l∆∞·ª£t xem v√† s·ªë l∆∞·ª£t like
            const videoDetails = await axios.get(`https://www.googleapis.com/youtube/v3/videos`, {
                params: {
                    part: 'statistics',
                    id: videoId,
                    key: apiKey
                }
            });

            const stats = videoDetails.data.items[0].statistics;
            const views = stats.viewCount;
            const likes = stats.likeCount;

            videoLinks.push(videoId);

            videoList += `${i + 1}. ${videoTitle}\n   L∆∞·ª£t xem: ${views}\n   L∆∞·ª£t th√≠ch: ${likes}\n\n`;
        }

        // G·ª≠i danh s√°ch video t√¨m ƒë∆∞·ª£c
        const message = `¬ªüîé C√≥ ${videoLinks.length} video tr√πng v·ªõi t·ª´ kh√≥a c·ªßa b·∫°n:\n\n${videoList}¬ª H√£y reply (ph·∫£n h·ªìi theo s·ªë th·ª© t·ª±) ƒë·ªÉ ch·ªçn video.`;
        e.sendMessage({ body: message }, a.threadID, a.messageID);

        // L∆∞u l·∫°i c√°c video ID ƒë·ªÉ bot c√≥ th·ªÉ g·ª≠i file √¢m thanh khi ng∆∞·ªùi d√πng reply
        global.client.handleReply.push({
            name: this.config.name,
            messageID: a.messageID,
            author: a.senderID,
            videoLinks: videoLinks
        });

    } catch (error) {
        console.error("Error fetching video data:", error);
        return e.sendMessage("Kh√¥ng th·ªÉ x·ª≠ l√Ω y√™u c·∫ßu do l·ªói t·ª´ API YouTube.", a.threadID, a.messageID);
    }
};

module.exports.handleReply = async function ({ api: e, event: a, handleReply: t }) {
    const videoLinks = t.videoLinks;
    const videoIndex = parseInt(a.body) - 1; // S·ªë th·ª© t·ª± b√†i h√°t (l·∫•y t·ª´ reply)

    if (isNaN(videoIndex) || videoIndex < 0 || videoIndex >= videoLinks.length) {
        return e.sendMessage("¬ª Vui l√≤ng ch·ªçn m·ªôt s·ªë h·ª£p l·ªá trong danh s√°ch!", a.threadID, a.messageID);
    }

    const videoId = videoLinks[videoIndex];
    const videoUrl = `https://www.youtube.com/watch?v=${videoId}`;

    try {
        // L·∫•y th√¥ng tin video v√† √¢m thanh t·ª´ YouTube
        const info = await ytdl.getInfo(videoUrl);
        const audioFormat = ytdl.chooseFormat(info.formats, { filter: 'audioonly' });

        const audioStream = ytdl(videoUrl, { format: audioFormat });
        const filePath = __dirname + "/cache/audio.mp3";
        const fileWriteStream = fs.createWriteStream(filePath);
        
        // Ghi √¢m thanh v√†o file
        audioStream.pipe(fileWriteStream);

        audioStream.on('end', () => {
            // G·ª≠i file √¢m thanh khi t·∫£i xong
            e.sendMessage({
                body: `¬ª ƒêang ph√°t nh·∫°c: ${info.videoDetails.title}`,
                attachment: fs.createReadStream(filePath)
            }, a.threadID, (err, messageID) => {
                // X√≥a file √¢m thanh sau khi g·ª≠i xong
                fs.unlinkSync(filePath);
            }, a.messageID);
        });

    } catch (error) {
        console.error("Error fetching audio from video:", error);
        return e.sendMessage("Kh√¥ng th·ªÉ t·∫£i √¢m thanh t·ª´ video n√†y.", a.threadID, a.messageID);
    }
};
